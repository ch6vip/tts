# ============================================
# 优化的多阶段 Dockerfile
# ============================================

# 阶段 1: 依赖下载阶段 (利用 Docker 层缓存)
FROM golang:1.24-alpine AS deps

WORKDIR /app

# 仅复制 go.mod 和 go.sum,充分利用 Docker 层缓存
# 只有依赖变化时才会重新执行此层
COPY go.mod go.sum ./

# 使用 go mod download 并验证依赖
# go mod download: 下载依赖到模块缓存
# go mod verify: 验证依赖的完整性
RUN go mod download && \
    go mod verify

# ============================================
# 阶段 2: 构建阶段
FROM golang:1.24-alpine AS builder

WORKDIR /app

# 从依赖阶段复制已下载的模块缓存
COPY --from=deps /go/pkg/mod /go/pkg/mod
COPY go.mod go.sum ./

# 复制源代码
COPY . .

# 安装必要的工具和 FFmpeg
# 使用 Alpine 官方仓库中的 FFmpeg,更可靠且体积更小
RUN apk add --no-cache ffmpeg

# 设置 FFmpeg 路径环境变量
ENV FFMPEG_PATH=/usr/bin/ffmpeg

# 构建应用程序
# CGO_ENABLED=0: 禁用 CGO,生成纯静态二进制
# -ldflags 参数说明:
#   -s: 去除符号表
#   -w: 去除 DWARF 调试信息
#   -trimpath: 去除文件系统路径
ARG VERSION=dev
ARG BUILD_TIME

RUN CGO_ENABLED=0 GOOS=linux GOARCH=${TARGETARCH} \
    go build \
    -ldflags="-s -w -X main.version=${VERSION} -X main.buildTime=${BUILD_TIME}" \
    -trimpath \
    -o /app/main \
    ./cmd/api

# ============================================
# 阶段 3: 最终运行镜像 (使用 Alpine)
#
# 镜像选择说明:
# - 使用 Alpine 而不是 distroless/static,因为需要支持 FFmpeg 的动态链接库
# - Alpine 镜像体积小 (~5 MB),包含必要的运行时库和工具
# - 已包含 CA 证书和时区数据,支持 HTTPS 和时区设置
FROM alpine:3.19

# 安装运行时依赖
# - ca-certificates: HTTPS 请求所需的 CA 证书
# - tzdata: 时区数据
# - ffmpeg: FFmpeg 运行时库和依赖
RUN apk add --no-cache ca-certificates tzdata ffmpeg

# 设置标签
LABEL maintainer="ch6vip@gmail.com" \
      org.opencontainers.image.title="TTS Service" \
      org.opencontainers.image.description="Text-to-Speech Service" \
      org.opencontainers.image.source="https://github.com/ch6vip/tts"

# 创建非 root 用户
RUN addgroup -g 1000 appuser && \
    adduser -D -u 1000 -G appuser appuser

# 设置工作目录
WORKDIR /app

# 从构建器阶段复制二进制文件
COPY --from=builder /app/main /app/main

# 修改文件所有者
RUN chown -R appuser:appuser /app

# 切换到非 root 用户
USER appuser

# 设置时区环境变量
ENV TZ=Asia/Shanghai

# 设置 FFmpeg 路径环境变量
ENV FFMPEG_PATH=/usr/bin/ffmpeg

# 暴露端口 (使用非特权端口)
EXPOSE 8080

# 运行应用程序
ENTRYPOINT ["/app/main"]